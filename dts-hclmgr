#!/usr/bin/env bash
# This script was generated by bashly 1.0.7 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
dts_hclmgr_usage() {
  if [[ -n $long_usage ]]; then
    printf "dts-hclmgr - Dasharo Tools Suite Hardware Compatibility List Manager\n"
    echo

  else
    printf "dts-hclmgr - Dasharo Tools Suite Hardware Compatibility List Manager\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dts-hclmgr [OPTIONS] COMMAND\n"
  printf "  dts-hclmgr [COMMAND] --help | -h\n"
  printf "  dts-hclmgr --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Generate CPU compatibility list documentation for Dasharo Universe website.\n" "cpu      "
  printf "  %s   Generate memory compatibility list documentation for Dasharo Universe website.\n" "memory   "
  printf "  %s   Generate GPU compatibility list documentation for Dasharo Universe website.\n" "gpu      "
  printf "  %s   Generate mainboard compatibility list documentation for Dasharo Universe website.\n" "mainboard"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--force, -f"
    printf "    Ignore warning that directory with logs already exist.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--quiet, -q"
    printf "    Do no throw errors while parsin HCLs.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
dts_hclmgr_cpu_usage() {
  if [[ -n $long_usage ]]; then
    printf "dts-hclmgr cpu - Generate CPU compatibility list documentation for Dasharo Universe website.\n"
    echo

  else
    printf "dts-hclmgr cpu - Generate CPU compatibility list documentation for Dasharo Universe website.\n"
    echo

  fi

  printf "Alias: c\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dts-hclmgr cpu HCL_REPORT\n"
  printf "  dts-hclmgr cpu --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "HCL_REPORT"
    printf "    Dashsro HCL Report in *.tar.gz package.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  dts-hclmgr cpu report.tar.gz\n"
    echo

  fi
}

# :command.usage
dts_hclmgr_memory_usage() {
  if [[ -n $long_usage ]]; then
    printf "dts-hclmgr memory - Generate memory compatibility list documentation for Dasharo Universe website.\n"
    echo

  else
    printf "dts-hclmgr memory - Generate memory compatibility list documentation for Dasharo Universe website.\n"
    echo

  fi

  printf "Alias: m\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dts-hclmgr memory HCL_REPORT\n"
  printf "  dts-hclmgr memory --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "HCL_REPORT"
    printf "    Dashsro HCL Report in *.tar.gz package.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  dts-hclmgr memory report.tar.gz\n"
    echo

  fi
}

# :command.usage
dts_hclmgr_gpu_usage() {
  if [[ -n $long_usage ]]; then
    printf "dts-hclmgr gpu - Generate GPU compatibility list documentation for Dasharo Universe website.\n"
    echo

  else
    printf "dts-hclmgr gpu - Generate GPU compatibility list documentation for Dasharo Universe website.\n"
    echo

  fi

  printf "Alias: g\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dts-hclmgr gpu HCL_REPORT\n"
  printf "  dts-hclmgr gpu --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "HCL_REPORT"
    printf "    Dashsro HCL Report in *.tar.gz package.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  dts-hclmgr gpu report.tar.gz\n"
    echo

  fi
}

# :command.usage
dts_hclmgr_mainboard_usage() {
  if [[ -n $long_usage ]]; then
    printf "dts-hclmgr mainboard - Generate mainboard compatibility list documentation for Dasharo Universe website.\n"
    echo

  else
    printf "dts-hclmgr mainboard - Generate mainboard compatibility list documentation for Dasharo Universe website.\n"
    echo

  fi

  printf "Alias: mb\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dts-hclmgr mainboard HCL_REPORT\n"
  printf "  dts-hclmgr mainboard --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "HCL_REPORT"
    printf "    Dashsro HCL Report in *.tar.gz package.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  dts-hclmgr mb report.tar.gz\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/dasharo.sh
# lib/dasharo.sh

extract_dasharo_version() {
  local dmidecode_file="$1"
  local dasharo_line
  local dasharo_version

  dasharo_line=$(grep 'Version: Dasharo' "$dmidecode_file")
  dasharo_version=$(echo "$dasharo_line" | awk -F' ' '{print $4}')

  echo "$dasharo_version"
}

perform_extraction() {
    local dir_name=$1
    local force=$2
    local hcl_report=$3

    # Check if the directory already exists
    if [ -d "$dir_name" ]; then
        # Remove the directory if force flag is set or ask for confirmation
        if [ "$force" = "1" ]; then
            rm -rf "$dir_name"
        else
            echo "Warning: Directory $dir_name already exists."
            read -p "Do you want to remove the directory and unpack the file again? (y/n) " confirm
            if [ "$confirm" != "y" ] && [ "$confirm" != "Y" ]; then
                echo "Operation aborted."
                return 0
            fi
            rm -rf "$dir_name"
        fi
    fi

    # Create the directory
    mkdir -p "$dir_name"

    # Unpack the tar.gz file into the directory
    tar -xzf "$hcl_report" -C "$dir_name"
}

extract_lookup_string_from_decode_dimms() {
	local bank_number="$1"
	local file_contents="$2"
	local lookup_string="$3"

	# Find the line number of the given bank line
	bank_line_number=$(echo "$file_contents" | awk -v bank="$bank_number" '/bank/ && $3 == bank {print NR}')

	# Find the first occurrence of lookup string after the given bank line
	match_line=$(echo "$file_contents" | awk -v line="$bank_line_number" 'NR > line && /'"$lookup_string"'/ {print NR; exit}')

	lookup_string_extracted=$(echo "$file_contents" | awk "NR == $match_line")

	restul_tmp=$(echo "$lookup_string_extracted" | awk -F "$lookup_string" '{print $2}')

	# Trim leading and trailing whitespace
	echo $(echo "$restul_tmp" | awk '{$1=$1;print}')
}

# :command.command_functions
# :command.function
dts_hclmgr_cpu_command() {
  # src/cpu_command.sh
  # Variable containing the path to the tar.gz file
  hcl_report=${args[hcl_report]}
  force=${args[--force]}
  quiet=${args[--quiet]}

  # Extract the directory name from the file path
  dir_name=$(basename "$hcl_report" .tar.gz)

  perform_extraction "$dir_name" "$force" "$hcl_report"

  # Extract the Dasharo Version using the function
  dasharo_version=$(extract_dasharo_version "$dir_name/logs/dmidecode.log")

  # File containing the cpuinfo
  cpuinfo_file="$dir_name/logs/cpuinfo.log"

  # Extract the CPU Model
  cpu_model=$(grep 'model name' "$cpuinfo_file" | head -1 | awk -F ': ' '{print $2}')

  # Define the compatiblity information source, for now it is always Dasharo HCL
  # Report
  source="Dasharo HCL Report"

  if [ -n "$dasharo_version" ];then
  	echo "| $cpu_model | $dasharo_version | $source |"
  fi

}

# :command.function
dts_hclmgr_memory_command() {
  # src/memory_command.sh
  # Variable containing the path to the tar.gz file
  hcl_report=${args[hcl_report]}
  force=${args[--force]}
  quiet=${args[--quiet]}

  # Extract the directory name from the file path
  dir_name=$(basename "$hcl_report" .tar.gz)

  perform_extraction "$dir_name" "$force" "$hcl_report"

  # Extract the Dasharo Version using the function
  dasharo_version=$(extract_dasharo_version "$dir_name/logs/dmidecode.log")

  if [ ! -n "$dasharo_version" ];then
  	if [ "$quiet" != "1" ]; then
  		echo "ERROR: Vendor BIOS HCL"
  	fi
  	exit 1
  fi

  # File containing the decode-dimms
  decodedimms_file="$dir_name/logs/decode-dimms.log"

  if [ ! -f "$decodedimms_file" ]; then
  	if [ "$quiet" != "1" ]; then
  		echo "ERROR: Decode DIMMs does not extist: $decodedimms_file"
  	fi
  	exit 1
  fi

  file_contents=$(< $decodedimms_file)

  num_modules=$(grep -oP "(?<=Number of SDRAM DIMMs detected and decoded: )\d+" "$decodedimms_file")
  # Loop through each bank
  for ((bank=1; bank<=num_modules; bank++)); do

    module_manufacturer=$(extract_lookup_string_from_decode_dimms $bank "$file_contents" "Module Manufacturer")
    part_num=$(extract_lookup_string_from_decode_dimms $bank "$file_contents" "Part Number")
    size=$(extract_lookup_string_from_decode_dimms $bank "$file_contents" "Size")
    speed=$(extract_lookup_string_from_decode_dimms $bank "$file_contents" "Maximum module speed")

    case $num_modules in
      1)
        conf="&#10004/-/-";;
      2)
        conf="-/&#10004/-";;
      4)
        conf="-/-/&#10004";;
      *)
        conf="unknown"
    esac

  	echo "| $module_manufacturer | $part_num | $size | $speed | $conf | $dasharo_version | Dasharo HCL report |"
  done

}

# :command.function
dts_hclmgr_gpu_command() {
  # src/gpu_command.sh
  # Variable containing the path to the tar.gz file
  hcl_report=${args[hcl_report]}
  force=${args[--force]}
  quiet=${args[--quiet]}

  echo "ERROR: Not implemented. Waiting for https://github.com/Dasharo/dasharo-issues/issues/462."
  exit 1
  # Extract the directory name from the file path
  dir_name=$(basename "$hcl_report" .tar.gz)

  perform_extraction "$dir_name" "$force" "$hcl_report"

  # Extract the Dasharo Version using the function
  dasharo_version=$(extract_dasharo_version "$dir_name/logs/dmidecode.log")

  if [ ! -n "$dasharo_version" ];then
  	if [ "$quiet" != "1" ]; then
  		echo "ERROR: Vendor BIOS HCL"
  	fi
  	exit 1
  fi

}

# :command.function
dts_hclmgr_mainboard_command() {
  # src/mainboard_command.sh
  echo "# this file is located in 'src/mainboard_command.sh'"
  echo "# code for 'dts-hclmgr mainboard' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        dts_hclmgr_usage
        exit
        ;;

      # :flag.case
      --force | -f)

        # :flag.case_no_arg
        args['--force']=1
        shift
        ;;

      # :flag.case
      --quiet | -q)

        # :flag.case_no_arg
        args['--quiet']=1
        shift
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    cpu | c)
      action="cpu"
      shift
      dts_hclmgr_cpu_parse_requirements "$@"
      shift $#
      ;;

    memory | m)
      action="memory"
      shift
      dts_hclmgr_memory_parse_requirements "$@"
      shift $#
      ;;

    gpu | g)
      action="gpu"
      shift
      dts_hclmgr_gpu_parse_requirements "$@"
      shift $#
      ;;

    mainboard | mb)
      action="mainboard"
      shift
      dts_hclmgr_mainboard_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      dts_hclmgr_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dts_hclmgr_cpu_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dts_hclmgr_cpu_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="cpu"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['hcl_report']+x} ]]; then

          args['hcl_report']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['hcl_report']+x} ]]; then
    printf "missing required argument: HCL_REPORT\nusage: dts-hclmgr cpu HCL_REPORT\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
dts_hclmgr_memory_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dts_hclmgr_memory_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="memory"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['hcl_report']+x} ]]; then

          args['hcl_report']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['hcl_report']+x} ]]; then
    printf "missing required argument: HCL_REPORT\nusage: dts-hclmgr memory HCL_REPORT\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
dts_hclmgr_gpu_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dts_hclmgr_gpu_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="gpu"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['hcl_report']+x} ]]; then

          args['hcl_report']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['hcl_report']+x} ]]; then
    printf "missing required argument: HCL_REPORT\nusage: dts-hclmgr gpu HCL_REPORT\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
dts_hclmgr_mainboard_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dts_hclmgr_mainboard_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="mainboard"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['hcl_report']+x} ]]; then

          args['hcl_report']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['hcl_report']+x} ]]; then
    printf "missing required argument: HCL_REPORT\nusage: dts-hclmgr mainboard HCL_REPORT\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "cpu") dts_hclmgr_cpu_command ;;
    "memory") dts_hclmgr_memory_command ;;
    "gpu") dts_hclmgr_gpu_command ;;
    "mainboard") dts_hclmgr_mainboard_command ;;
  esac
}

initialize
run "$@"
